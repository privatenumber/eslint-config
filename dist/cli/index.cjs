"use strict";require("tsx/esm");var u=require("path"),p=require("cleye"),h=require("eslint/use-at-your-own-risk"),c=require("execa"),y=require("url"),v=require("fs/promises"),w=require("../index.cjs");require("@eslint/js"),require("globals"),require("confusing-browser-globals"),require("module"),require("@eslint-community/eslint-plugin-eslint-comments"),require("@stylistic/eslint-plugin"),require("eslint-plugin-import-x"),require("@typescript-eslint/eslint-plugin"),require("@typescript-eslint/parser"),require("eslint-plugin-regexp"),require("node:fs"),require("eslint-plugin-n"),require("node:path"),require("../index-BsUJzcDL.cjs"),require("node:process"),require("node:fs/promises"),require("node:url"),require("os"),require("util"),require("eslint-plugin-promise"),require("eslint-plugin-markdown"),require("eslint-plugin-jsonc"),require("eslint-plugin-yml"),require("yaml-eslint-parser"),require("eslint-plugin-no-use-extend-native"),require("eslint-plugin-unicorn"),require("eslint-plugin-react"),require("eslint-plugin-react-hooks"),require("get-tsconfig"),require("fs"),require("eslint-plugin-vue"),require("vue-eslint-parser"),require("eslint");const f=async e=>v.access(e).then(()=>e,()=>{}),x=async e=>{const r=await f("eslint.config.ts")??await f("eslint.config.js");if(r){const t=await import(y.pathToFileURL(r).toString());if(t.default)return console.log("[@pvtnbr/eslint-config]: Using config file:",r),t.default}return w.pvtnbr(e)},m=e=>{let r=0,t=0,o=0;for(const n of e)r+=n.errorCount,t+=n.fatalErrorCount,o+=n.warningCount;return{errorCount:r,fatalErrorCount:t,warningCount:o}},C=e=>e.fatalErrorCount>0?2:e.errorCount>0?1:0,i=p.cli({name:"lint",parameters:["<files...>"],help:{description:"by @pvtnbr/eslint-config"},flags:{fix:{type:Boolean,description:"Automatically fix problems"},staged:{type:Boolean,description:"Only lint staged files within the files passed in"},quiet:{type:Boolean,description:"Report errors only"},cache:{type:Boolean,description:"Only check changed files"},cacheLocation:{type:String,description:"Path to the cache file or directory"},ignorePattern:{type:[String],description:"Pattern of files to ignore"},node:{type:[String],description:"Enable Node.js rules. Pass in a glob to specify files"}}}),F=e=>{if(e.length===0)return!1;const r=e.filter(t=>t.length>0);return r.length>0?r:!0};(async()=>{const{FlatESLint:e}=h,r=new e({baseConfig:await x({node:F(i.flags.node)}),overrideConfigFile:!0,fix:i.flags.fix,cache:i.flags.cache,cacheLocation:i.flags.cacheLocation,ignorePatterns:i.flags.ignorePattern});let t=i._.files.map(s=>u.resolve(s));if(i.flags.staged)try{const{stdout:s}=await c.execa("git",["rev-parse","--show-toplevel"]),{stdout:q}=await c.execa("git",["diff","--staged","--name-only","--diff-filter=ACMR"]);t=q.split(`
`).filter(Boolean).map(a=>u.resolve(s,a)).filter(a=>t.some(d=>a.startsWith(d)))}catch{console.error("Error: Failed to detect staged files from git"),process.exit(1)}const o=await r.lintFiles(t);i.flags.fix&&await e.outputFixes(o);let n=o;i.flags.quiet&&(n=e.getErrorResults(o));const g=m(o),l=await(await r.loadFormatter()).format(n);l&&console.log(l),process.exitCode=C(g)})();
