#!/usr/bin/env node
import"tsx/esm";import{cli as l}from"cleye";import p from"eslint/use-at-your-own-risk";import{pathToFileURL as c}from"url";import f from"fs/promises";import{pvtnbr as m}from"../index.mjs";import"@eslint/js";import"globals";import"confusing-browser-globals";import"module";import"@eslint-community/eslint-plugin-eslint-comments";import"@stylistic/eslint-plugin";import"eslint-plugin-import";import"@typescript-eslint/eslint-plugin";import"@typescript-eslint/parser";import"eslint-plugin-regexp";import"node:fs";import"eslint-plugin-n";import"node:path";import"../index-74ca7704.mjs";import"node:process";import"node:fs/promises";import"node:url";import"os";import"util";import"eslint-plugin-promise";import"eslint-plugin-markdown";import"eslint-plugin-jsonc";import"eslint-plugin-yml";import"yaml-eslint-parser";import"eslint-plugin-no-use-extend-native";import"eslint-plugin-unicorn";import"eslint-plugin-react";import"eslint-plugin-react-hooks";import"get-tsconfig";import"fs";import"eslint-plugin-vue";import"vue-eslint-parser";import"eslint";const a=async t=>f.access(t).then(()=>t,()=>{}),g=async t=>{const o=await a("eslint.config.ts")??await a("eslint.config.js");if(o){const r=await import(c(o).toString());if(r.default)return console.log("[@pvtnbr/eslint-config]: Using config file:",o),r.default}return m(t)},u=t=>{let o=0,r=0,e=0;for(const n of t)o+=n.errorCount,r+=n.fatalErrorCount,e+=n.warningCount;return{errorCount:o,fatalErrorCount:r,warningCount:e}},d=t=>t.fatalErrorCount>0?2:t.errorCount>0?1:0,i=l({name:"lint",parameters:["<files...>"],help:{description:"by @pvtnbr/eslint-config"},flags:{fix:{type:Boolean,description:"Automatically fix problems"},quiet:{type:Boolean,description:"Report errors only"},cache:{type:Boolean,description:"Only check changed files"},cacheLocation:{type:String,description:"Path to the cache file or directory"},ignorePattern:{type:[String],description:"Pattern of files to ignore"},node:{type:[String],description:"Enable Node.js rules. Pass in a glob to specify files"}}}),h=t=>{if(t.length===0)return!1;const o=t.filter(r=>r.length>0);return o.length>0?o:!0};(async()=>{const{FlatESLint:t}=p,o=new t({baseConfig:await g({node:h(i.flags.node)}),overrideConfigFile:!0,fix:i.flags.fix,cache:i.flags.cache,cacheLocation:i.flags.cacheLocation,ignorePatterns:i.flags.ignorePattern}),r=await o.lintFiles(i._.files);i.flags.fix&&await t.outputFixes(r);let e=r;i.flags.quiet&&(e=t.getErrorResults(r));const n=u(r),s=await(await o.loadFormatter()).format(e);s&&console.log(s),process.exitCode=d(n)})();
