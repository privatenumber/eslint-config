#!/usr/bin/env node
import"tsx/esm";import p from"path";import{cli as u}from"cleye";import h from"eslint/use-at-your-own-risk";import{execa as c}from"execa";import{pathToFileURL as y}from"url";import w from"fs/promises";import{pvtnbr as C}from"../index.mjs";import"@eslint/js";import"globals";import"confusing-browser-globals";import"module";import"@eslint-community/eslint-plugin-eslint-comments";import"@stylistic/eslint-plugin";import"eslint-plugin-import-x";import"@typescript-eslint/eslint-plugin";import"@typescript-eslint/parser";import"eslint-plugin-regexp";import"node:fs";import"eslint-plugin-n";import"node:path";import"../index-DW7ozoHd.mjs";import"node:process";import"node:fs/promises";import"node:url";import"os";import"util";import"eslint-plugin-promise";import"eslint-plugin-markdown";import"eslint-plugin-jsonc";import"eslint-plugin-yml";import"yaml-eslint-parser";import"eslint-plugin-no-use-extend-native";import"eslint-plugin-unicorn";import"eslint-plugin-react";import"eslint-plugin-react-hooks";import"get-tsconfig";import"fs";import"eslint-plugin-vue";import"vue-eslint-parser";import"eslint";const f=async t=>w.access(t).then(()=>t,()=>{}),x=async t=>{const o=await f("eslint.config.ts")??await f("eslint.config.js");if(o){const e=await import(y(o).toString());if(e.default)return console.log("[@pvtnbr/eslint-config]: Using config file:",o),e.default}return C(t)},F=t=>{let o=0,e=0,r=0;for(const n of t)o+=n.errorCount,e+=n.fatalErrorCount,r+=n.warningCount;return{errorCount:o,fatalErrorCount:e,warningCount:r}},b=t=>t.fatalErrorCount>0?2:t.errorCount>0?1:0,i=u({name:"lint",parameters:["<files...>"],help:{description:"by @pvtnbr/eslint-config"},flags:{fix:{type:Boolean,description:"Automatically fix problems"},staged:{type:Boolean,description:"Only lint staged files within the files passed in"},quiet:{type:Boolean,description:"Report errors only"},cache:{type:Boolean,description:"Only check changed files"},cacheLocation:{type:String,description:"Path to the cache file or directory"},ignorePattern:{type:[String],description:"Pattern of files to ignore"},node:{type:[String],description:"Enable Node.js rules. Pass in a glob to specify files"}}}),E=t=>{if(t.length===0)return!1;const o=t.filter(e=>e.length>0);return o.length>0?o:!0};(async()=>{const{FlatESLint:t}=h,o=new t({baseConfig:await x({node:E(i.flags.node)}),overrideConfigFile:!0,fix:i.flags.fix,cache:i.flags.cache,cacheLocation:i.flags.cacheLocation,ignorePatterns:i.flags.ignorePattern});let e=i._.files.map(s=>p.resolve(s));if(i.flags.staged)try{const{stdout:s}=await c("git",["rev-parse","--show-toplevel"]),{stdout:g}=await c("git",["diff","--staged","--name-only","--diff-filter=ACMR"]);e=g.split(`
`).filter(Boolean).map(a=>p.resolve(s,a)).filter(a=>e.some(d=>a.startsWith(d)))}catch{console.error("Error: Failed to detect staged files from git"),process.exit(1)}const r=await o.lintFiles(e);i.flags.fix&&await t.outputFixes(r);let n=r;i.flags.quiet&&(n=t.getErrorResults(r));const m=F(r),l=await(await o.loadFormatter()).format(n);l&&console.log(l),process.exitCode=b(m)})();
